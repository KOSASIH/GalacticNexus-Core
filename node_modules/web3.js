// Import dependencies
const EthereumTx = require('ethereumjs-tx');
const Web3Utils = require('web3-utils');
const Web3Provider = require('web3-provider');

// Create a Web3 instance
class Web3 {
  constructor(provider) {
    this.provider = provider;
    this.utils = Web3Utils;
  }

  // Set the provider
  setProvider(provider) {
    this.provider = provider;
  }

  // Get the provider
  getProvider() {
    return this.provider;
  }

  // Get the current block number
  async getBlockNumber() {
    return this.provider.getBlockNumber();
  }

  // Get the current block
  async getBlock(blockNumber) {
    return this.provider.getBlock(blockNumber);
  }

  // Get the transaction count for a given address
  async getTransactionCount(address) {
    return this.provider.getTransactionCount(address);
  }

  // Get a transaction by hash
  async getTransaction(transactionHash) {
    return this.provider.getTransaction(transactionHash);
  }

  // Send a transaction
  async sendTransaction(transaction) {
    return this.provider.sendTransaction(transaction);
  }

  // Deploy a contract
  async deployContract(contractBytecode, contractAbi, gasPrice, gasLimit) {
    const txCount = await this.getTransactionCount(this.provider.accounts[0]);
    const tx = new EthereumTx({
      from: this.provider.accounts[0],
      to: '0x0000000000000000000000000000000000000000',
      value: '0x0',
      gas: gasLimit,
      gasPrice: gasPrice,
      nonce: Web3Utils.toHex(txCount),
      data: contractBytecode,
    });
    tx.sign(this.provider.accounts[0].privateKey);
    const txHash = await this.sendTransaction(tx);
    return txHash;
  }

  // Call a contract function
  async callContractFunction(contractAddress, functionName, functionArgs, gasPrice, gasLimit) {
    const contractAbi = await this.provider.getContractAbi(contractAddress);
    const functionAbi = contractAbi.find((abi) => abi.name === functionName);
    const functionSignature = Web3Utils.encodeFunctionSignature(functionAbi);
    const functionCallData = Web3Utils.encodeFunctionCall(functionAbi, functionArgs);
    const tx = new EthereumTx({
      from: this.provider.accounts[0],
      to: contractAddress,
      value: '0x0',
      gas: gasLimit,
      gasPrice: gasPrice,
      nonce: await this.getTransactionCount(this.provider.accounts[0]),
      data: functionSignature + functionCallData.slice(2),
    });
    tx.sign(this.provider.accounts[0].privateKey);
    const txHash = await this.sendTransaction(tx);
    return txHash;
  }
}

// Export the Web3 instance
module.exports = Web3;
